#!/bin/bash
#
# Copyright 2018-present Celestica. All Rights Reserved.
#
# This program file is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program in a file named COPYING; if not, write to the
# Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301 USA

PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin
. /usr/local/bin/openbmc-utils.sh

command=(
"status fru_status"
"psu psu_fru_"
"sys sys_fru"
"fan fan_fru"
"bmc bmc_fru"
"come come_fru"
"fb fb_fru"
"switch switch_fru"
"lb lc_fru"
)


#For Seastone2F
FAN_EEPROM_MAX=4
PSU_EEPROM_MAX=2
PSU_ADDR_I2C_BUS=( '25 0x59' '24 0x58' )
PSU_XML="/etc/eeprom-data/eeprom_seastone2f.xml"
PSU_USAGE="-p <1/2>    show specific psu FRU"


############################################

psu_info() {
    val=$(get_psu_present $1)
    if [ $val -eq 0 ]; then
        echo "Present: Absent"
        return 1
    elif [ $val -eq -1 ]; then
        echo "Invalid PSU number"
    fi
    if [ $(eeprom_data -d psu$1 -c $PSU_XML | grep 'DPS-1100' > /dev/null; echo $?) == 0 ]; then
        eeprom_data -d psu$1 -c $PSU_XML 2>/dev/null
    else
        fruid-util psu$1 2>/dev/null
    fi
}

psu_usage() {
    echo "option:"
    echo "-a    show all psu FRU"
    echo $PSU_USAGE
}

fan_usage() {
    echo "option:"
    echo "<fanID> [arg]    get/set FAN FRU"
}

psu_fru_() {
    if [ $# -lt 1 ]; then
        psu_usage
        return 1
    fi
    while getopts "ap:" opt; do
        case $opt in
            a)
                for index in $(seq 1 ${PSU_EEPROM_MAX})
                do
                    psu_info $index
                    echo
                done
                ;;
            p)
                psu_info $OPTARG
                ;;
            \?)
                psu_usage
        esac
    done
}

sys_fru() {
    fruid-util sys
}

bmc_fru() {
    fruid-util bmc
}

come_fru() {
    fruid-util cpu
}

fb_fru() {
    fruid-util fb
}

switch_fru() {
    fruid-util switch
}

fan_fru() {
    if [ $# -lt 1 ] || [ $1 -lt 0 ] || [ $1 -gt ${FAN_EEPROM_MAX} ]; then
        fan_usage
        return 1
    fi
    i=$1
    val=$(get_fan_present $i)
    if [ $val -eq 0 ] ; then
        echo "FAN${i} Present: Absent"
        return 1
    fi
    fruid-util fan${i}
}

lc_usage() {
    echo "fru-util lb 1/2"
}

lc_fru() {
    echo "Warning: Board $board_type does not support the function!"
    exit 0
}

show_psu_status() {
    val=$(get_psu_present $1)
    if [ $val -eq 1 ]; then
        echo "Present: Present"
    else
        echo "Present: Absent"
        echo "Power Type: Unknown"
        echo "Power Status: Not OK"
        echo "AC Status: Not OK"
        return 1
    fi
    echo "Power Type:" $(get_psu_input_type $1)
    val=$(get_psu_power_status $1)
    if [ $val -eq 1 ]; then
        echo "Power Status: OK"
    else
        echo "Power Status: Not OK"
    fi

    val=$(get_psu_input_status $1)
    if [ $val -eq 1 ]; then
        echo "AC Status: OK"
    else
        echo "AC Status: Not OK"
    fi
}

fru_status() {
    all=0
    if [ $# -eq 0 ]; then
        all=1
    fi
    if [ "$1" = "psu" ] || [ $all -eq 1 ]; then
        for i in $( seq 1 $PSU_EEPROM_MAX )
        do
            echo "PSU${i}:"
            show_psu_status $i
            echo
        done
    fi

    if [ "$1" = "fan" ] || [ $all -eq 1 ]; then
        for i in $( seq 1 $FAN_EEPROM_MAX )
        do
            echo -n "Fan$i: "
            val=$(get_fan_present $i)
            if [ $val -eq 1 ]; then
                echo "Present"
            else
                echo "Absent"
            fi
            echo
        done
    fi
}

##############################################
if [ $# -lt 1 ]; then
	echo "Error: parameter must >= 1"
	echo "Support commands: "
	for i in "${command[@]}"; do
		s=($i)
		echo $s
	done
	exit 1
fi

for i in "${command[@]}"; do
	matched=0
	s=($i)
	for j in "${s[@]}"; do
		#echo $j
		if [ $matched -eq 1 ]; then
			shift
			$j $@
			exit 0
		fi
		if [ "$1" == "$j" ]; then
			matched=1
			continue
		else
			matched=0
			break;
		fi
	done
done

echo "Invalid parameter: $1"
exit 1
